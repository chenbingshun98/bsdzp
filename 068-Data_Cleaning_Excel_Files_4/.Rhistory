model,
type="l",
lty=1,
main="SEIR model (with intervention)",
xlab="Time"
)
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
infections <- as.data.frame(model)$I
peak <- max(infections)
match(peak, infections)
print(paste("peak:",peak))
print(paste("peak day:", match(peak, infections)))
}
main()
?match
?ode
?require
?poly
poly(1:10, 3)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- -(beta*S*I)/N
dE <- (beta*S*I)/N - sigma*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I
dM <- mu*I
return(list(c(dS, dE, dI, dR, dM)))
})
}
params <- c(beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
initial_state <- c(S=999999, E=1, I=0, R=0, M=0)
times <- 0:365
model <- ode(initial_state, times, SEIR, params)
model
View(model)
class(model)
summary(model)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
#https://blog.csdn.net/arcers/article/details/104238668
seir<-function(time, state, pars){
with(as.list(c(state, pars)),{
dS <-- S * beta * I/N
dE <- S * beta * I/N - E * k
dI <- E * k - I * (mu + gamma)
dR <- I * gamma
dN <- dS + dE + dI + dR
list(c(dS,dE,dI,dR,dN))
})
}
N <- 1.9E8 # 总人口
I0 <- 89 # 期初感染数
E0 <- 0 # 期初潜伏数
RM0 <- 0 # 期初移除数
S0 = N - I0 - RM0 # 期初易感人数
init<-c(S = S0, E = E0, I = I0, R = RM0, N = N)
time <- seq(0, 150, 1)
pars<-c(
beta = 0.55,	#有效接触率
k = 1,	#潜伏到感染的转化率
gamma = 0.2,	#RECOVERY
mu=0.02	#感染期死亡率
)
res.seir<-as.data.frame(lsoda(y = init, times = time, func = seir, parms = pars))
?lsoda
res.seir
res.seir2<-as.data.frame(ode(y = init, times = time, func = seir, parms = pars))
res.seir2
res.seir==res.seir2
ggplot(res.seir) +
geom_line(aes(x = time, y = S, col = '2 易感'))+
geom_line(aes(x = time, y = E, col = '3 潜伏'))+
geom_line(aes(x = time, y = I, col = '4 感染'))+
geom_line(aes(x = time, y = R, col = '5 移除'))+
geom_line(aes(x = time, y = N, col = '1 人口'))+
theme_light(base_family = 'Kai') +
scale_colour_manual("",
values=c(
"2 易感" = "cornflowerblue", "3 潜伏" = "orange",
"4 感染" = "darkred", "5 移除" = "forestgreen",
"1 人口" = "black"
)
) +
scale_y_continuous('')
model <- as.tibble(model)
ggplot(model) +
geom_line(aes(x = time, y = S, col = '2 易感'))+
geom_line(aes(x = time, y = E, col = '3 潜伏'))+
geom_line(aes(x = time, y = I, col = '4 感染'))+
geom_line(aes(x = time, y = R, col = '5 移除'))+
geom_line(aes(x = time, y = N, col = '1 人口'))+
theme_light(base_family = 'Kai') +
scale_colour_manual("",
values=c(
"2 易感" = "cornflowerblue", "3 潜伏" = "orange",
"4 感染" = "darkred", "5 移除" = "forestgreen",
"1 人口" = "black"
)
) +
scale_y_continuous('')
ggplot(res.seir) +
geom_line(aes(x = time, y = S, col = '2 易感'))+
geom_line(aes(x = time, y = E, col = '3 潜伏'))+
geom_line(aes(x = time, y = I, col = '4 感染'))+
geom_line(aes(x = time, y = R, col = '5 移除'))+
geom_line(aes(x = time, y = N, col = '1 人口'))+
theme_light(base_family = 'Kai') +
scale_colour_manual("",
values=c(
"2 易感" = "cornflowerblue", "3 潜伏" = "orange",
"4 感染" = "darkred", "5 移除" = "forestgreen",
"1 人口" = "black"
)
) +
scale_y_continuous('')
ggplot(res.seir) +
geom_line(aes(x = time, y = S, col = '2 易感'))+
geom_line(aes(x = time, y = E, col = '3 潜伏'))+
geom_line(aes(x = time, y = I, col = '4 感染'))+
geom_line(aes(x = time, y = R, col = '5 移除'))+
geom_line(aes(x = time, y = N, col = '1 人口'))+
theme_light(base_family = 'Kai') +
scale_colour_manual("",
values=c(
"2 易感" = "cornflowerblue", "3 潜伏" = "orange",
"4 感染" = "darkred", "5 移除" = "forestgreen",
"1 人口" = "black"
)
) +
scale_y_continuous('')
View(res.seir)
View(model)
View(res.seir)
View(res.seir)
View(res.seir)
View(res.seir)
ggplot(model) +
geom_line(aes(x = time, y = S, col = '2 易感'))+
geom_line(aes(x = time, y = E, col = '3 潜伏'))+
geom_line(aes(x = time, y = I, col = '4 感染'))+
geom_line(aes(x = time, y = R, col = '5 移除'))+
theme_light(base_family = 'Kai') +
0
ggplot(model) +
geom_line(aes(x = time, y = S, col = '2 易感'))+
geom_line(aes(x = time, y = E, col = '3 潜伏'))+
geom_line(aes(x = time, y = I, col = '4 感染'))+
geom_line(aes(x = time, y = R, col = '5 移除'))+
theme_light(base_family = 'Kai')
?geom_line
1+2
1+2
library(tidyverse)
library(lubridate)
library(rvest)
theme_set(theme_light())
#### scrape Miami Heat @ Milwaukee Bucks (1st Rd | Game 2 Eastern Conference Playoffs, 2021) ####
## html
espn_html <- read_html("https://www.espn.com/nba/playbyplay/_/gameId/401327878")
## scrape elements for time stamps, play details, and score
time_stamps <- espn_html %>%
html_nodes("div") %>%
html_nodes("#gp-quarter-1") %>%
html_nodes(".time-stamp") %>%
html_text() %>%
as_tibble() %>%
rename(time = value)
time_stamps
possession_details <- espn_html %>%
html_nodes("div") %>%
html_nodes("#gp-quarter-1") %>%
html_nodes(".logo") %>%
html_nodes("img") %>%
html_attr("src") %>%
gsub(".*(mil|mia).*","\\1",.) %>%
as_tibble() %>%
rename(possession = value)
?gsub
possession_details
gsub("([ab])", "\\1_\\1_", "abc and ABC")
play_details <- espn_html %>%
html_nodes("div") %>%
html_nodes("#gp-quarter-1") %>%
html_nodes(".game-details") %>%
html_text() %>%
as_tibble() %>%
rename(play_details = value)
score <- espn_html %>%
html_nodes("div") %>%
html_nodes("#gp-quarter-1") %>%
html_nodes(".combined-score") %>%
html_text() %>%
as_tibble() %>%
rename(score = value)
## bind data together
df <- bind_cols(time_stamps, possession_details, play_details, score)
df %>% head()
# Get the score in separate columns for the respective team
df <- df %>%
mutate(
Heat  = as.numeric(sub("-.*", replacement = "", score)), ## using sub
Bucks = as.numeric(gsub(".*-", replacement = "", score)), ## using gsub same
score_diff = Heat - Bucks)
df
df <- df %>%
mutate(
quarter_time = ifelse(
grepl(pattern = ":", time),
minute(ms(time)) + second(ms(time)) / 60,
as.numeric(as.character(time)) / 60),
quarter_time = 12 - quarter_time,
team_col = if_else(score_diff <= 0, "Bucks", "Heat")
)
df
View(df)
?ms
View(df)
## Scoring Worm
df %>%
ggplot(aes(x = quarter_time, y = score_diff)) +
geom_hline(yintercept = 0,
size = 1,
linetype = "dashed") +
geom_step(size = 1.2,
aes(color = team_col)) +
scale_color_manual(values = c(Bucks = "darkgreen", Heat = "red")) +
scale_y_continuous(limits = c(-30, 30),
breaks = seq(from = -30, to = 30, by = 10),
labels = c(30, 20, 10, 0, 10, 20, 30)) +
labs(title = "Heat @ Bucks",
subtitle = "Quarter 1",
x = "Time",
y = "Score Difference") +
annotate(geom = "text", x = 1,  y = -20, label = "Bucks", size = 10) +
annotate(geom = "text", x = 1,  y = 20, label = "Heat", size = 10) +
theme(legend.position = "none")
#### Identifying all non-free throw shots
## Count the number of shots in the first quarter
# Set up a "pattern" of shot types to check for
shot_types <- "shot|jump|layup|dunk|three pointer"
Free_throws <- "free throw"
df %>%
mutate(
shot = case_when(
grepl(shot_types, play_details, ignore.case = TRUE) ~ 1,
grepl(Free_throws, play_details, ignore.case = TRUE) ~ 2,
TRUE ~ 0)
) %>%
summarize(total_shots = sum(shot, na.rm = TRUE))
View(df)
View(df)
# alternative approach -- put the pattern into grepl()
df %>%
mutate(
shot = case_when(
grepl("([Ss]hot|[Jj]ump|[Ll]ayup|[Dd]unk|[Tt]hree pointer)",play_details ) ~ 1,
TRUE ~ 0
)) %>%
summarize(total_shots = sum(shot, na.rm = TRUE))
df %>%
mutate(shot = case_when(
str_detect(play_details, regex(shot_types, ignore_case = TRUE)) ~ 1,
TRUE ~ 0)) %>%
summarize(total_shots = sum(shot, na.rm = TRUE))
## How many shots per team?
df %>%
mutate(shot = case_when(grepl(shot_types, play_details, ignore.case = TRUE) ~ 1,
TRUE ~ 0)) %>%
group_by(possession) %>%
summarize(shots = sum(shot))
subs <- df %>%
filter(grepl(pattern = "enters the game for", play_details)) %>%
mutate(player_out = gsub(".* enters the game for ", replacement = "", play_details),
player_in = gsub(" enters the game for .*", replacement = "", play_details),
sub_detail = paste(player_in, player_out, sep = " in for "))
sub()
subs
View(subs)
subs_stringr <- df %>%
filter(grepl(pattern = "enters the game for", play_details)) %>%
mutate(player_out = str_remove(play_details,".* enters the game for "),
player_in = str_remove(play_details," enters the game for .*"),
sub_detail = paste(player_in, player_out, sep = " in for "))
subs2 <- df %>%
filter(grepl(pattern = "enters the game for", play_details)) %>%
mutate(player_out = gsub("(.*) enters the game for (.*)", replacement = "\\2", play_details),
player_in = gsub("(.*) enters the game for (.*)", replacement = "\\1", play_details),
sub_detail = paste(player_in, player_out, sep = " in for "))
View(subs2)
s
df %>%
filter(grepl(pattern = "enters the game for", play_details)) %>%
count(possession) %>%
ggplot(aes(x = possession, y = n)) +
geom_col(aes(fill = possession),
color = "black",
alpha = 0.75) +
scale_fill_manual(values = c(mil = "darkgreen", mia = "red")) +
scale_y_continuous(breaks = seq(from = 0, to = 10, by = 2)) +
labs(x = NULL,
y = "Substitutions",
title = "First Quarter Substitutions",
subtitle = "Miami Heat @ Milwaukee Bucks (1st Rd | Game 2 Eastern Conference Playoffs, 2021)",
caption = "Data: https://www.espn.com/nba/playbyplay/_/gameId/401327878") +
theme(plot.title = element_text(size = 20),
plot.subtitle = element_text(size = 13),
axis.text = element_text(size = 13, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 13, face = "bold"),
legend.position = "none",
plot.caption = element_text(face = "bold", color = "blue"))
View(df)
df %>%
filter(grepl(pattern = "enters the game for", play_details)) %>%
count(possession)
View(df)
View(play_details)
grepl(pattern = "enters the game for", play_details)
df %>%
filter(grepl(pattern = "enters the game for", play_details))
View(play_details)
df %>%
ggplot(aes(x = quarter_time, y = score_diff)) +
geom_hline(yintercept = 0,
size = 1,
linetype = "dashed") +
geom_step(size = 1.2,
aes(color = team_col),
alpha = 0.3) +
geom_point(
data = subs %>% filter(possession == "mil"),
color = "darkgreen"
) +
ggrepel::geom_text_repel(
data = subs %>% filter(possession == "mil") ,
aes(label = sub_detail),
color = "darkgreen",
size = 3) +
scale_color_manual(values = c(Bucks = "darkgreen", Heat = "red")) +
scale_y_continuous(limits = c(-30, 30),
breaks = seq(from = -30, to = 30, by = 10),
labels = c(30, 20, 10, 0, 10, 20, 30)) +
labs(title = "Heat @ Bucks",
subtitle = "Quarter 1 - Bucks Substitutions",
x = "Time",
y = "Score Difference") +
annotate(geom = "text", x = 1,  y = -20, label = "Bucks", size = 10) +
annotate(geom = "text", x = 1,  y = 20, label = "Heat", size = 10) +
theme(legend.position = "none")
fruit3 <- c("papaya", "lime", "apple")
gregexpr(pattern = "p", text = fruit3)
str(gregexpr(pattern = "p", text = fruit3))
?gregexpr
str_locate(fruit3, pattern = "p")
str_locate_all(fruit3, pattern = "p")
shopping_list <- c("apples x4", "bag of flour", "10", "milk x2")
matches <- regexpr(pattern = "\\d+", text = shopping_list) # digits
regmatches(shopping_list, m = matches)
library(readxl)
library(janitor)
library(writexl)
install.packages("writexl")
install.packages("openxlsx")
library(writexl)
library(openxlsx)
output_dir <- here::here("TidyTuesday_Explained/068-Data_Cleaning_Excel_Files_4")
output_dir
###### Get and Clean Data --------------------------------------------------------------
excel_file <- here::here("TidyTuesday_Explained/068-Data_Cleaning_Excel_Files_4/ugly_data.xlsx")
sheets <- excel_sheets(excel_file)
setwd("C:\Users\terry\Documents\我爱学习\统计软件\R\R脚本\068-Data_Cleaning_Excel_Files_4\068-Data_Cleaning_Excel_Files_4")
setwd("C:\Users\terry\Documents\我爱学习\统计软件\R\R脚本\068-Data_Cleaning_Excel_Files_4\068-Data_Cleaning_Excel_Files_4")
setwd("C:\Users\terry\Documents\我爱学习\统计软件\R\R脚本")
output_dir <- here::here("TidyTuesday_Explained/068-Data_Cleaning_Excel_Files_4")
output_dir
setwd("C:\Users\terry\Documents\我爱学习\统计软件\R\R脚本")
setwd("C:\Users\terry\Documents\我爱学习\统计软件\R\R脚本")
setwd("C:\Users\terry\Documents\我爱学习\统计软件\R\R脚本\068-Data_Cleaning_Excel_Files_4")
setwd("C:/Users/terry/Documents/我爱学习/统计软件/R/R脚本/068-Data_Cleaning_Excel_Files_4")
output_dir <- here::here("TidyTuesday_Explained/068-Data_Cleaning_Excel_Files_4")
output_dir
?here::here
?here::set_here
output_dir
setwd("C:/Users/terry/Documents/我爱学习/统计软件/R/R脚本/068-Data_Cleaning_Excel_Files_4")
output_dir <- here::here("TidyTuesday_Explained/068-Data_Cleaning_Excel_Files_4")
output_dir
excel_file <- "C:/Users/terry/Documents/我爱学习/统计软件/R/R脚本/068-Data_Cleaning_Excel_Files_4/ugly_data.xlsx"
sheets <- excel_sheets(excel_file)
sheets <- excel_sheets(excel_file)
excel_file <- "C:/Users/terry/Documents/我爱学习/统计软件/R/R脚本/068-Data_Cleaning_Excel_Files_4/ugly_data.xlsx"
excel_file <- "C:/try_to_success/ugly_data.xlsx"
sheets <- excel_sheets(excel_file)
sheets
dat <- read_excel(excel_file,
sheet = sheets[1],
col_names = FALSE)
dat
vital_rows <- 1:(which(is.na(dat[[1]]))[1]-1)
workout_rows <- (which(is.na(dat[[1]]))[1]+1):nrow(dat)
vitals <- setNames(
data.frame(matrix(unlist(dat[vital_rows, 2]),nrow = 1)),
unlist(dat[vital_rows,c(1)])) %>%
clean_names()
fitness <- dat[workout_rows, ]
workout <- setdiff(unique(unlist(fitness[1,])), NA)
fitness_colnames <- fitness[c(1,2),] %>%
t() %>%
data.frame() %>%
fill(1) %>%
unite(
col = "colnames",
everything(),
sep = "_"
) %>%
pull(colnames)
fitness_dat <- fitness[-c(1,2),]
colnames(fitness_dat) <- fitness_colnames
workout_dat_long <- map_dfr(workout, function(w){
fitness_dat %>%
select(starts_with(w)) %>%
mutate(
idx = 1:nrow(.)
) %>%
pivot_longer(
cols = starts_with(w),
) %>%
separate(
name, sep = "_", into = c("workout","detail")
) %>%
pivot_wider(names_from = detail,values_from = value) %>%
select(-idx) %>%
filter(!is.na(Date))
})
player_data <- bind_cols(vitals, workout_dat_long)
all_player_data <- map_dfr(sheets, function(s){
dat <- read_excel(excel_file,
sheet = s,
col_names = FALSE)
vital_rows <- 1:(which(is.na(dat[[1]]))[1]-1)
workout_rows <- (which(is.na(dat[[1]]))[1]+1):nrow(dat)
vitals <- setNames(
data.frame(matrix(unlist(dat[vital_rows, 2]),nrow = 1)),
unlist(dat[vital_rows,c(1)])) %>%
clean_names()
fitness <- dat[workout_rows, ]
workout <- setdiff(unique(unlist(fitness[1,])), NA)
fitness_colnames <- fitness[c(1,2),] %>%
t() %>%
data.frame() %>%
fill(1) %>%
unite(
col = "colnames",
everything(),
sep = "_"
) %>%
pull(colnames)
fitness_dat <- fitness[-c(1,2),]
colnames(fitness_dat) <- fitness_colnames
workout_dat_long <- map_dfr(workout, function(w){
fitness_dat %>%
select(starts_with(w)) %>%
mutate(
idx = 1:nrow(.)
) %>%
pivot_longer(
cols = starts_with(w),
) %>%
separate(
name, sep = "_", into = c("workout","detail")
) %>%
pivot_wider(names_from = detail,values_from = value) %>%
select(-idx) %>%
filter(!is.na(Date))
})
bind_cols(vitals, workout_dat_long)
})
View(fitness_dat)
?ggrepel::geom_text_repel
df %>%
ggplot(aes(x = quarter_time, y = score_diff)) +
geom_hline(yintercept = 0,
size = 1,
linetype = "dashed") +
geom_step(size = 1.2,
aes(color = team_col),
alpha = 0.3) +
geom_point(
data = subs %>% filter(possession == "mil"),
color = "darkgreen"
) +
ggrepel::geom_text_repel(
data = subs %>% filter(possession == "mil") ,
aes(label = sub_detail),
color = "darkgreen",
size = 3) +
scale_color_manual(values = c(Bucks = "darkgreen", Heat = "red")) +
scale_y_continuous(limits = c(-30, 30),
breaks = seq(from = -30, to = 30, by = 10),
labels = c(30, 20, 10, 0, 10, 20, 30)) +
labs(title = "Heat @ Bucks",
subtitle = "Quarter 1 - Bucks Substitutions",
x = "Time",
y = "Score Difference") +
annotate(geom = "text", x = 1,  y = -20, label = "Bucks", size = 10) +
annotate(geom = "text", x = 1,  y = 20, label = "Heat", size = 10) +
theme(legend.position = "none")
?solve
