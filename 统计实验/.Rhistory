library(rvest)
library(stringr)
# 豆瓣排名前25电影及评价爬取
url <-'http://movie.douban.com/top250?format=text'
webpage <- read_html(url)
# 1， 获取排名
# 用CSS选择器获取排名部分【关键是这句话】
rank_data_html <- html_nodes(webpage,'.pic em') # class 为 pic类的子标签em
# 把排名转换为文本
rank_data <- html_text(rank_data_html)
# 检查一下数据
head(rank_data)
## [1] "1" "2" "3" "4" "5" "6"
# 2， 获取名称
# 用CSS选择器获取标题部分
title_data_html <- html_nodes(webpage,'.info .hd a')
title_data_html <- html_node(title_data_html,'.title')
# 爬虫综合实践
# 三、设计R语言程序
# 把排名转换为文本，并提取第一个“/”左侧部分
title_data <- html_text(title_data_html) %>% # 去掉HTML标记
str_trim # 去掉字符串头和尾部的空格
# 检查一下数据
head(title_data)
## [1] "肖申克的救赎" "霸王别姬" "这个杀手不太冷" "阿甘正传"
## [5] "美丽人生" "泰坦尼克号"
# 3， 获取上映年份
year_data_html <- html_nodes(webpage,'.info .bd p') # 获取子代码块
year_data <- html_text(year_data_html) %>% # 去掉HTML标记
str_extract("[0-9]{4}.{1}\\/") %>% # 提取 数值 加 空格 加 斜杠的部分
str_extract("[0-9]{4}") %>% # 提取数值部分
na.omit() %>% # 去掉缺失的元素
as.numeric() # 转为数值类型
year_data
View(rank_data_html)
rank_data_html
# 1， 获取排名
# 用CSS选择器获取排名部分【关键是这句话】
rank_data_html <- html_nodes(webpage,'.pic em') # class 为 pic类的子标签em
rank_data_html
# 豆瓣排名前25电影及评价爬取
url <-'http://movie.douban.com/top250?format=text'
webpage <- read_html(url)
# 1， 获取排名
# 用CSS选择器获取排名部分【关键是这句话】
rank_data_html <- html_nodes(webpage,'.pic em') # class 为 pic类的子标签em
rank_data_html
# 把排名转换为文本
rank_data <- html_text(rank_data_html)
rank_data
## [1] "1" "2" "3" "4" "5" "6"
# 2， 获取名称
# 用CSS选择器获取标题部分
title_data_html <- html_nodes(webpage,'.info .hd a')
title_data_html
title_data_html <- html_node(title_data_html,'.title')
title_data_html
# 爬虫综合实践
# 三、设计R语言程序
# 把排名转换为文本，并提取第一个“/”左侧部分
title_data <- html_text(title_data_html) %>% # 去掉HTML标记
str_trim # 去掉字符串头和尾部的空格
# 爬虫综合实践
# 三、设计R语言程序
# 把排名转换为文本，并提取第一个“/”左侧部分
title_data <- html_text(title_data_html) %>% # 去掉HTML标记
str_trim # 去掉字符串头和尾部的空格
# 检查一下数据
head(title_data)
## [1] "肖申克的救赎" "霸王别姬" "这个杀手不太冷" "阿甘正传"
## [5] "美丽人生" "泰坦尼克号"
# 3， 获取上映年份
year_data_html <- html_nodes(webpage,'.info .bd p') # 获取子代码块
year_data <- html_text(year_data_html) %>% # 去掉HTML标记
str_extract("[0-9]{4}.{1}\\/") %>% # 提取 数值 加 空格 加 斜杠的部分
str_extract("[0-9]{4}") %>% # 提取数值部分
na.omit() %>% # 去掉缺失的元素
as.numeric() # 转为数值类型
year_data
Rating_num <- webpage %>% html_nodes('.bd .star p') %>%
html_node() %>% html_text() %>% str_extract_all('[0-9]')
View(Rating_num)
Rating_num
Rating_num <- webpage %>% html_nodes('.bd .star p') %>%
html_node() %>% html_text() %>% str_extract_all('[0-9]') %>% as.numeric()
Rating_num <- webpage %>% html_nodes('.bd star') %>%
html_node() %>% html_text() %>% str_extract_all('[0-9]') %>% as.numeric()
Rating_num <- webpage %>% html_nodes('.bd star') %>%
html_node() %>% html_text() %>% str_extract_all('[0-9]')
View(Rating_num)
Rating_num <- webpage %>% html_nodes('.bd star')
View(Rating_num)
Rating_num <- html_nodes(webpage,'.bd star')
View(Rating_num)
test <- html_nodes(webpage,'.quote inq')
View(test)
# 1， 获取排名
# 用CSS选择器获取排名部分【关键是这句话】
rank_data_html <- html_nodes(webpage,'.pic em') # class 为 pic类的子标签em
rank_data_html
test
test <- html_nodes(webpage,'.quote inq p')
View(test)
test <- html_nodes(webpage,'.inq')
View(test)
test2 <- html_text(test)
test2
Rating_num <- html_nodes(webpage,'.star')
Rating_num
Rating_num <- html_nodes(webpage,'.star') %>%
str_extract_all("^<span>[0-9]+人评价</span>$")
View(test)
View(Rating_num)
View(test)
View(Rating_num)
View(Rating_num)
View(test)
Rating_num <- html_nodes(webpage,'.star') %>%
html_text()
Rating_num
Rating_num <- html_nodes(webpage,'.star') %>%
html_text() %>% str_extract_all("[0-9]+人评价$")
View(Rating_num)
Rating_num
Rating_num <- html_nodes(webpage,'.star') %>%
html_text() %>% str_extract_all("[0-9]")
Rating_num
Rating_num <- html_nodes(webpage,'.star') %>%
html_text() %>% str_extract_all("[0-9]*人评价")
View(Rating_num)
rating
Rating_num
Rating_num <- html_nodes(webpage,'.star') %>%
html_text()
Rating_num
Rating_num <- html_nodes(webpage,'.star') %>%
html_text() %>% str_extract_all("[0-9]*+人评价")
View(Rating_num)
Rating_num
test2
Rating_num <- html_nodes(webpage,'.star') %>%
html_text() %>% str_extract_all("人评价$")
Rating_num
Rating_num <- html_nodes(webpage,'.star') %>%
html_text() %>% str_extract_all("^[:digit:]*人评价$")
Rating_num
