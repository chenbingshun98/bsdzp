####chapter 1 R 简介（下）
#1.8 数据结构（1）
 #1.8.1 向量
 #向量赋值
 
xx1080 <- 20 #向量赋值，右边赋值给左边
xx1080 = 20 #向量赋值，右边赋值给左边
 20 -> xx1080 #左边赋值给右边
20 = xx1080 #Error in 20 = xx1080 : invalid (do_set) lefthand side to assignment

 xx1081 <- c("金融 1701","金融 1702")
11. #将右边内容赋值给左边变量，也可以用->赋值号，
12. #意味着左边值赋给右边变量，如果是字符型变量必须加上引号
13.
14. xx1081
15. #不同数据类型强行一致化
16. xx2 <- c("abd",123) #原则上单个向量里面的数据应该同类型，如果不同类型将会被强
制变成同一类型,[1] "abd" "123"
17. xx22 <- c(123,FALSE)
18. xx23 <- c("abc",123,FALSE)
19.
20. #向量命名
21. xx20 <- c(x=3,y=4,z=5) ###给向量赋值，并对其中的元素进行命名
22. xx20
23. names(xx20) <- c("A","B","c") ###修改向量 xx20 的元素名
24. xx20
25. names(xx20)[2] <- "U" ###修改向量 xx20 的第 1 和第 2 个元素名
26. xx20
27.
28.
29. #自动补齐
30. xx21 <- c(1,3,5,7,8) ###给向量 xx21 赋值
31. xx21+2
32. xx21+c(2,3)
33.
34. #生成有规律的向量
35. ###1）冒号的神奇用法
36. xx3 <- c(1:10) ###将 1 到 10 的值赋值给 xx3,[1] 1 2 3 4 5 6 7 8 9 10
37. xx30 <- c(0.5:10.5)
38. xx4 <- c(10:1) ###将 10 到 1 的值赋值给 XX4，
[1] 10 9 8 7 6 5 4 3 2 1
39.
40. ###2）利用 seq()函数
41.
42. xx1085<- seq(1,10) ###将 1 到 10 的值赋给 xx1085，步长默认为 1
43. xx1085 ###读取 xx1085
44.
45. xx1086<- seq(1,10, by=2) ###将 1 到 10 的值赋给 xx1086，步长为 2
46. xx1086 ###读取 xx1086
47.
48. xx1087<- seq(1,10, length=4) ###将 1 到 10 的值赋给 xx1087，总长度为 4
49. xx1087 ###读取 xx1087
50.
51. #3)rep()
52. rep(c(1,2),3) ###序列 12 重复 3 次
53. rep(c(1,2),c(2,3)) ###第一个元素重复 2 遍，第二个元素重复 3 遍
54. rep(c(1,2),each=2) ###第一个元素重复 2 遍，第二个元素重复 2 遍
55.
56.
57. #4)利用 paste 函数将字符串相连
58. xx5 <- paste("金融",1701,sep="") #利用 paste 函数可以将字符和其他字符连接成字符
串
59. xx50 <- paste("金融",c(1701,1702),sep="") #长度不相等时，较短的向量自动补齐
60. xx51 <- paste("金融",c(1701,1702),c("甲","乙"),sep="") #也可以将三个字符串，甚
至更多的字符串黏在一起
61.
62. #如果想生成金融 1701 甲、金融 1701 乙、金融 1702 甲、金融 1702 乙。。。怎么办
63.
64. ####chapter 1 R 简介（下）
65. #1.8 数据结构(2)
66. #如果想生成金融 1701 甲、金融 1701 乙、金融 1702 甲、金融 1702 乙。。。怎么办
67. #方法一
68. xx70 <- paste("金融",rep(1701:1704,each=2),sep="")
69. xx71 <- paste(xx70,c("甲","乙"))
70. xx71
71. #方法二
72. xx7 <- paste(rep(paste("金融",1701:1704,sep="") ,each=2),c("甲","乙
"),sep="")
73. xx7
74.
75. #生成随机数
76. #生成随机整数
77. x <- sample(1:100,3) #产生随机整数
78. runif(10,min=0,max=1) #产生 10 个最小值为 0，最大值为 1 的随机数
79. rnorm(10,mean=0,sd=1) ###产生 10 个平均值为 0，标准差为 1 的正态分布随机数
80. rpois(20,5) ###产生 30 个参数为 5 的泊松分布随机数
81.
82. #向量访问
83. xx1089 <- c(1:10) ###将 1 至 10 赋值给 xx1089
84. xx1089[3] ###取向量 xx1089 的第 3 个元素
85.
86.
87. xx1089[c(3,6)] <- c(NA,-2) ###将 NA 和-2 分别赋值给向量 xx1089 的第 3 个和第
6 个元素。
88. xx1089
89.
90. xx1089[xx1089 < 3] ###将向量 xx1089 中小于 3 的值返回
91.
92. xx1090 <- xx1089[!is.na(xx1089)] ###将 xx1089 向量中非缺失值赋值给
xx1090
93. xx1090
94.
95. #向量常用函数
96. xx1092 <- c(3:10) ###生成向量
97. length(xx1092) ###向量 xx1092 的长度
98. mode(xx1092) ###向量 xx1092 的数据类型
99. range (xx1092) ###向量 xx1092 的范围
100. which.max(xx1092) ###向量 xx1092 的第几个元素最大
101. append(xx1092,20:23,after=4) ###在向量 xx1092 的第 4 个元素后添加 20、21、22、
23
102.
103. #今日问题
104. #1）随机产生一个包括负数和正数的向量(整数），负数采用 1-负数替代，即-3 变成 4，正数
用 1+正数替代，即 2 变成 3，怎么编写代码？
105. #2）随机产生一个包括负数和正数的向量(整数），负数用 NA 替代，再将 NA 用 0 替代
106.
107. #数据结构（3）矩阵
108. #1.8.2 矩阵
109. #创建矩阵
110. x1820 <- matrix(1:12,nrow=3,ncol=4) #生成 3 行 4 列，以列排序元素的矩阵
111. x1820
112. x1821 <- matrix(1:12,nrow=3,ncol=4,byrow=T) ###生成 3 行 4 列，以行排序元素的
矩阵
113. x1821
114.
115. #创建矩阵，将向量转换为矩阵
116. xx1820 <- 1:12 #赋值
117. dim(xx1820) <- c(3,4) #将向量转换为矩阵，定义维度
118. xx1820
119.
120. #给矩阵的行和列命名
121. x1823 <- matrix(1:12,nrow=3,ncol=4,dimnames=list(letters[1:3],LETTERS[24:27
                                                                           ])) ###生成 3 行 4 列，以列排序元素的矩，并给出行名和列名阵
122. x1823
123.
124. rownames(xx1820) <- letters[1:3]
125. colnames(xx1820) <- LETTERS[24:27]
126. xx1820
127. ###生成单位矩阵：
128. diag(4) ###生成 4×4 的单位矩阵
129. diag(1:3)
130.
131. ###2）访问矩阵中的元素
132. x1820[2, ] ###提取矩阵 x1820 的第 2 行
133. x1820[, 2] ###提取矩阵 x1820 的第 2 列
134. x1820[2, 2] ###提取矩阵 x1820 的第 2 行第 2 列的元素
135. x1820[2,c(1, 2)] ###提取矩阵 x1820 的第 2 行第 1 和第 2 列的元素
136. ###取对角线元素
137. diag(x1820) ###取矩阵 x1820 的对角线元素
138. diag(diag(x1820)) ###以矩阵 x1820 的对角线元素生成新矩阵
139. x1821[x1821[,2]>5,]
140. x1821[,x1821[,2]>5]
141. x1821[x1821[,2]>5,2]
142.
143. ###3）矩阵运算
144. t(x1820) ###计算 x1820 矩阵的转置矩阵
145. ###3）矩阵相乘
146. t(x1820) %*% x1820 ###矩阵 x1820 的转置与矩阵 x1820 相乘
147.
148. crossprod(x1820,x1820) ###矩阵 x1820 的转置与矩阵 x1820 相乘
149. ###点乘
150. x18201 <- matrix(1:12,nrow=3,ncol=3) ###生成 3 行 3 列，以列排序元素的矩阵
151. x18201
152. t(x18201) * x18201
153.
154. ###4)求逆矩阵
155. x1824 <- matrix(rnorm(4),2,2) ###生成 4 个标准正态分布随机数形成 2*2 矩阵
x1824
156. solve(x1824) ###求矩阵 x1824 的逆矩阵
157.
158. ###矩阵中常用函数
159. ###求特征值和特征向量
160. x1825 <- matrix(1:16,4,4) ###生成 4*4 的矩阵 x1825
161. eigen(x1825) ###取矩阵 x1825 的特征值和特征向量
162.
163. ###Choleskey 分解
164. x1825 <- diag(4)+3 ###生成矩阵 x1825
165. chol(x1825) ###对矩阵 x1825 进行 Choleskey 分解
166.
167.
168. #今日问题
169. #1.问题：产生随机数，形成矩阵，负的 1-该数，正的 1 加该数
170. #2.问题：如何取矩阵上三角和下三角矩阵
171. #两种方法：1）用 lower.tri( )和 upper.tri( )函数;
172. #2)利用矩阵取元素的方法
173. #3.问题：产生随机数（有正有负），形成矩阵，矩阵中小于 0 的用 NA 替代
174. #4.问题：把矩阵中 NA 用 0 替代
175.
176. #1.8 数据结构（4）列表和数组
177. #前一次作业
178. #问题：产生随机数，形成矩阵，负的 1-该数，正的 1 加该数
179. x18211 <- matrix(sample(-50:50,16),nrow=4,ncol=4,byrow=T) ###生成 4 行 4
列，以行排序元素的矩阵
180. x18211
181. x182110 <- x18211
182. x182110[x182110 <= 0] <- 1 - x182110[x182110 <= 0]
183. x182110[x182110 > 0] <- 1 + x182110[x182110 > 0]
184. x182110
185.
186. #方法一
187. x18212 <- x18211
188. x18212[x18211 <=0 ] <- 1- x18211[x18211 <=0 ]
189. x18212[x18211 >0 ] <- 1+ x18211[x18211 >0 ]
190. x18212
191. #方法二，先做加，再做减
192. x18211[x18211 > 0 ] <- 1+x18211[x18211 > 0 ]
193. x18211[x18211 <= 0 ] <- 1-x18211[x18211 <= 0 ]
194. x18211
195.
196.
197.
198. ###问题：怎么取上三角和下三角矩阵
199. ###取下三角
200. ###1）用 upper.tri 函数
201. x1820[upper.tri(x1820)] <- 0
202.
203. ###2）取矩阵 x1820 的下三角矩阵
204. x1820[row(x1820) < col(x1820)] <- 0 ###取矩阵 x1820 的下三角矩阵
205. x1820
206.
207. ###取上三角
208. ###1）用 lower.tri 函数
209. x1820[lower.tri(x1820)] <- 0
210.
211. ###2）取矩阵 x1820 的下三角矩阵
212. x1820[row(x1820) > col(x1820)] <- 0 ###取矩阵 x1820 的下三角矩阵
213. x1820
214. #问题：矩阵中小于 0 的用 NA 替代
215. x18201 <- matrix(runif(12,-1,1),nrow=3,ncol=4,byrow=T) ###生成 3 行 4 列，以
行排序元素的矩阵
216. x18201
217. x18201[x18201 < 0] <- NA
218. #问题：把矩阵中 NA 用 0 替代
219. x18201[is.na(x18201)] <- 0
220.
221. ###列表
222. ###创建列表
223. stuID <- c(102,118,213,323,231) ###输入学生学号
224. stuage <- c(20,21,22,21,22) ###输入学生年龄
225. stuclass <- c("cx","cx","cx","cx","sy") ###输入学生所在班级
226. stuperf <- c("excellent","average","good","poor","average") ###输入学生成
绩
227. studata0 <- list("学号"=stuID,"年龄"=stuage,"班级"=stuclass,"成绩
"=stuperf) ###生成列表
228. studata0
229. #列表和矩阵放在一个新列表中
230. x18200 <- matrix(1:16,nrow=4,ncol=4)
231. studata1 <- list(studata0,x18200)
232. studata1
233.
234. #列表命名
235. names(studata1) <- c("列表 1","矩阵")
236. studata1
237. #访问列表中元素
238. studata0[[2]] ###提取列表中元素
239. studata0$学号 ###
240. studata0$学号[1]
241.
242. studata1[[1]][[1]][1]
243.
244. #向量转换为列表
245. stuID1 <- as.list(stuID)
246. stuID1
247. class(stuID1)
248. stuID2 <- unlist(stuID1)
249. stuID2
250.
251. #问题：班级前加金融
252. studata0[[1]] <- paste("金融",studata0[[1]],sep="")
253. #问题：把年龄都加上 5
254. studata0[[2]] <- studata0[[2]]+5
255.
256. #1.8 数据结构（5）数据框
257. ###创建数据框
258.
259. stuID <- c(102,118,213,323,231) ###输入学生学号
260. stuage <- c(20,21,22,21,22) ###输入学生年龄
261. stuclass <- c("cx","cx","cx","cx","sy") ###输入学生所在班级
262. stuperf <- c("excellent","average","good","poor","average") ###输入学生成
绩
263. studata1 <- data.frame(stuID, stuage,stuclass, stuperf) ###生成数据框
264. studata1
265. str(studata1)
266. studata2 <- data.frame(stuID, stuage,stuclass, stuperf,stringsAsFactors=F)
267. str(studata2)
268. ###修改行名
269. row.names(studata1) <- c("王一","张二","赵三","李四","刘五") ###修改行名
270. studata1
271. ###修改列名
272. studata1 <- data.frame("学号"=stuID,"年龄"=stuage,"班级"=stuclass,"成绩
"=stuperf) ###修改列名
273. studata1
274. studata11 <- studata1
275. colnames(studata11) <- c("A","B","C","D")
276. studata11
277.
278. ###访问元素
279. studata1[3,] ###提取数据框 studata1 中第 3 行数据
280.
281. studata1[,4] ###提取数据框 studata1 中第 4 列数据
282. studata1$"成绩" ###提取数据框 studata1 中列名为“成绩“的列
283. studata11$C
284.
285. ###行和列重新赋值
286. studata1$"成绩" <- c("优","中","良","及格","中") ###改变数据框 studata1 中列名
为”成绩“的列内容
287. studata1
288.
289. studata1$"成绩 2" <- c("优 2","中 2","良 2","及格 2","中 2") ###数据框 studata1
中增加一列名为”成绩 2“的列内容
290. studata1
291. ###条件提取
292. studata1[studata1$"年龄" < 22,] ######提取数据框 studata1 中年龄小于 22 的学生
293.
294. ###绑定数据框
295. attach(studata1) ###绑定数据框 studata1
296. 年龄 ###读取”年龄“列
297. detach(studata1) #接触绑定数据框
298.
299. #问题：班级前加金融
300.
301. #问题：把年龄小于 22 的设为 0，大于等于 22 的设为 1
302.
303. #1.8 数据结构（6）数组和因子
304. stuID <- c(102,118,213,323,231) ###输入学生学号
305. stuage <- c(20,21,22,21,22) ###输入学生年龄
306. stuclass <- c("cx","cx","cx","cx","sy") ###输入学生所在班级
307. stuperf <- c("excellent","average","good","poor","average") ###输入学生成
绩
308. studata1 <- data.frame(stuID, stuage,stuclass, stuperf,stringsAsFactors=F)
###生成数据框
309. studata1
310. #问题：班级前加金融
311. studata1$stuID <- paste("金融",studata1$stuID,sep="")
312. studata1
313. #问题：把年龄小于 22 的设为 0，大于等于 22 的设为 1
314. studata1$stuage[studata1$stuage < 22] <- 0
315. studata1$stuage[studata1$stuage >= 22] <- 1
316. studata1
317.
318. ###因子
319. stuperf<- c("excellent","average","good","poor","average")
320. stuperf<- factor(stuperf)
321.
322.
323. mode(stuperf) ###读取 stuperf2 的数据类型
324. class(stuperf) ###显示 stuperf2 的类
325.
326. ###将数值改为罗马数字
327. xx1860 <- c(1,2,2,3,3,2,2,1,1) ###创建向量
328. fxx1860 <- factor(xx1860,labels=c("I","II","III")) ###定义有序因子
329. fxx1860
330.
331.
332. ### 自定义排序 ###
333. stuperf2 <- factor(stuperf, order = TRUE, levels = c("excellent","good","av
erage","poor"))
334. stuperf2 <- factor(stuperf, order = TRUE, levels = c("excellent","good","av
erage","poor"))
335. stuperf2
336.
337. ### 自定义排序 中文 ###
338. stuperfc <- factor(c("优","中","良","差","中"), order = TRUE, levels = c("优
","良","中","差"))
339.
340. ###删除部分分类
341. score11 <- c('A', 'B', 'A', 'C', 'B')
342. score11 <- factor(score11,levels = c('C', 'B', 'A'),exclude="B",ordered = i
                       s.ordered(score))
343. score11
344.
345. score12 <- c('A', 'B', 'A', 'C', 'B') ###赋值
346. score12 <- factor(score12,levels = c('E','D','C', 'B', 'A'),ordered = is.or
                       dered(score))
347. ###定义有序型因子
348. levels(score12) ###提取分类值
349.
350. ###书中针对案例
351. stuID <- c(102,118,213,323,231) ###输入学生学号
352. stunames <- c("cql","jjl","yyr","cy","lq") ###输入学生姓名
353. stuage <- c(20,21,22,21,22) ###输入学生年龄
354. stuclass <- c("cx","cx","cx","cx","sy") ###输入学生所在班级
355. stuperf <- c("excellent","average","good","poor","average") ###输入学生成
绩
356. stuclass <- factor(stuclass) ###将班级变量定义为因子
357. stuperf2 <- factor(stuperf, order = TRUE, levels = c("excellent","good","av
erage","poor"))
358. studata2 <- data.frame(stuID, stuage, stunames, stuclass, stuperf2)
359. str(studata2)
360. summary(studata2)